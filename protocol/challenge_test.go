package protocol

import (
	"crypto/rand"
	"crypto/rsa"
	"encoding/json"
	"reflect"
	"testing"

	"github.com/square/go-jose"
)

func TestKeyAuthz(t *testing.T) {
	got, err := KeyAuthz("token", testJWK)
	if err != nil {
		t.Fatalf("KeyAuthz failed: %v", err)
	}

	if want := "token.luhDRvWTmOMLRwM2gMkTDdC88jVeIXo9Hm1r_Q6W41Y="; got != want {
		t.Errorf("KeyAuthz: got %q, want %q", got, want)
	}
}

func TestAnyChallenge(t *testing.T) {
	// Also tests MustRegisterChallengeType.
	in := &HTTP01Challenge{
		Type:  ChallengeHTTP01,
		URI:   "http://example.com/",
		Token: "a-token",
	}

	bs, err := json.Marshal(in)
	if err != nil {
		t.Fatalf("Marshal(%v) failed: %v", in, err)
	}

	if want := `{"type":"http-01","uri":"http://example.com/","token":"a-token"}`; string(bs) != want {
		t.Fatalf("Marshal(%v): got %q, want %q", in, bs, want)
	}

	var out anyChallenge
	if err := json.Unmarshal(bs, &out); err != nil {
		t.Fatalf("Unmarshal(%v) failed: %v", bs, err)
	}

	if !reflect.DeepEqual(out.c, in) {
		t.Errorf("Unmarshal: got %v, want %v", out.c, in)
	}

	_, err = json.Marshal(out)
	if err != nil {
		t.Fatalf("Marshal(%v) failed: %v", out, err)
	}
}

var (
	// testJWK is a JsonWebKey used for tests. Generated by mustGenerateTestJWK.
	testJWK = mustUnmarshalJWK(`{
	"kty": "RSA",
	"n": "1-OrKVWRL2mjMk8CQS4aoX0vY2RHjjPQbE-CwtSnXDmw9pe1NB3xc9LBrB_pWpjrJKzyJm8PEz4YGDNVC8UzCw",
	"e": "AQAB",
	"d": "vYhi_CbjD3zuiXxTvmV7e8srj1a6e12B3ZTwd5u6Unu13MqiceywGjXP98z18uCrAYgxyHHGQY6X7Ahfm2riAQ",
	"p": "23IPuW88sFRlPOlJ_OUWjQKE7DOXCFyUbeWxD8unk18",
	"q": "-9n1DN65zlVdGXzwxbt1tIxt2Jj8aQMrr-qa_i-Ni9U"
}`)
	// testPublicKey is the raw crypto.PublicKey part of testJWK.
	testPublicKey = testJWK.Key.(*rsa.PrivateKey).Public()
)

// mustUnmarshalJWK takes a JSON string and unmarshals the key. Panics on error.
func mustUnmarshalJWK(s string) *jose.JsonWebKey {
	ret := &jose.JsonWebKey{}
	if err := json.Unmarshal([]byte(s), ret); err != nil {
		panic(err)
	}
	return ret
}

// mustGenerateTestJWK generates a JsonWebKey for testing. Only used
// if testJWK is not good enough anymore. Panics on error.
func mustGenerateTestJWK() string {
	key, err := rsa.GenerateKey(rand.Reader, 512)
	if err != nil {
		panic(err)
	}

	jwk := jose.JsonWebKey{
		Key: key,
	}

	bs, err := json.MarshalIndent(jwk, "", "\t")
	if err != nil {
		panic(err)
	}
	return string(bs)
}
